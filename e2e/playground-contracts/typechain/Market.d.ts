/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "acceptOffer(address,address,address,uint256,uint256)": FunctionFragment;
    "cancelOffer(address,uint256)": FunctionFragment;
    "offers(address,address,uint256)": FunctionFragment;
    "upsertOffer(address,uint256,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upsertOffer",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upsertOffer",
    data: BytesLike
  ): Result;

  events: {
    "AcceptOffer(address,address,uint256,address,uint256,uint256,bytes)": EventFragment;
    "CancelOffer(address,address,uint256)": EventFragment;
    "UpsertOffer(address,address,uint256,uint256,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpsertOffer"): EventFragment;
}

export type AcceptOfferEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, string] & {
    contractAddress: string;
    from: string;
    tokenId: BigNumber;
    to: string;
    amount: BigNumber;
    price: BigNumber;
    data: string;
  }
>;

export type CancelOfferEvent = TypedEvent<
  [string, string, BigNumber] & {
    contractAddress: string;
    from: string;
    tokenId: BigNumber;
  }
>;

export type UpsertOfferEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string] & {
    contractAddress: string;
    from: string;
    tokenId: BigNumber;
    amount: BigNumber;
    price: BigNumber;
    data: string;
  }
>;

export class Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketInterface;

  functions: {
    acceptOffer(
      contractAddress: string,
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOffer(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    offers(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        amount: BigNumber;
        price: BigNumber;
        data: string;
      }
    >;

    upsertOffer(
      contractAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      price: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOffer(
    contractAddress: string,
    from: string,
    to: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOffer(
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  offers(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      amount: BigNumber;
      price: BigNumber;
      data: string;
    }
  >;

  upsertOffer(
    contractAddress: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    price: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOffer(
      contractAddress: string,
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffer(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    offers(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        amount: BigNumber;
        price: BigNumber;
        data: string;
      }
    >;

    upsertOffer(
      contractAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      price: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AcceptOffer(address,address,uint256,address,uint256,uint256,bytes)"(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: BigNumberish | null,
      to?: null,
      amount?: null,
      price?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, BigNumber, string],
      {
        contractAddress: string;
        from: string;
        tokenId: BigNumber;
        to: string;
        amount: BigNumber;
        price: BigNumber;
        data: string;
      }
    >;

    AcceptOffer(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: BigNumberish | null,
      to?: null,
      amount?: null,
      price?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, BigNumber, string],
      {
        contractAddress: string;
        from: string;
        tokenId: BigNumber;
        to: string;
        amount: BigNumber;
        price: BigNumber;
        data: string;
      }
    >;

    "CancelOffer(address,address,uint256)"(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { contractAddress: string; from: string; tokenId: BigNumber }
    >;

    CancelOffer(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { contractAddress: string; from: string; tokenId: BigNumber }
    >;

    "UpsertOffer(address,address,uint256,uint256,uint256,bytes)"(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: BigNumberish | null,
      amount?: null,
      price?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string],
      {
        contractAddress: string;
        from: string;
        tokenId: BigNumber;
        amount: BigNumber;
        price: BigNumber;
        data: string;
      }
    >;

    UpsertOffer(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: BigNumberish | null,
      amount?: null,
      price?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string],
      {
        contractAddress: string;
        from: string;
        tokenId: BigNumber;
        amount: BigNumber;
        price: BigNumber;
        data: string;
      }
    >;
  };

  estimateGas: {
    acceptOffer(
      contractAddress: string,
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOffer(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    offers(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upsertOffer(
      contractAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      price: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOffer(
      contractAddress: string,
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    offers(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upsertOffer(
      contractAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      price: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
