{"version":3,"file":"ngeth-ethers-angular.mjs","sources":["../../../../../ethers/angular/src/lib/components/blockies/index.ts","../../../../../ethers/angular/src/lib/events.ts","../../../../../ethers/angular/src/lib/erc1193/utils.ts","../../../../../ethers/angular/src/lib/erc1193/service.ts","../../../../../ethers/angular/src/lib/erc1193/module.ts","../../../../../ethers/angular/src/lib/erc1193/injected.ts","../../../../../ethers/angular/src/lib/chain/service.ts","../../../../../ethers/angular/src/lib/components/forms/ether.ts","../../../../../ethers/angular/src/lib/form/validators.ts","../../../../../ethers/angular/src/lib/components/forms/address.ts","../../../../../ethers/angular/src/lib/components/connect/connect.component.ts","../../../../../ethers/angular/src/lib/components/connect/connect.component.html","../../../../../ethers/angular/src/lib/components/index.ts","../../../../../ethers/angular/src/lib/pipes.ts","../../../../../ethers/angular/src/lib/module.ts","../../../../../ethers/angular/src/lib/contract.ts","../../../../../ethers/angular/src/lib/contracts-manager.ts","../../../../../ethers/angular/src/lib/tokens/erc20/utils.ts","../../../../../ethers/angular/src/lib/tokens/erc20/pipes.ts","../../../../../ethers/angular/src/lib/tokens/erc20/module.ts","../../../../../ethers/angular/src/lib/tokens/erc20/form.ts","../../../../../ethers/angular/src/lib/tokens/erc721/form.ts","../../../../../ethers/angular/src/lib/tokens/erc1155/form.ts","../../../../../ethers/angular/src/lib/guard.ts","../../../../../ethers/angular/src/lib/provider.ts","../../../../../ethers/angular/src/ngeth-ethers-angular.ts"],"sourcesContent":["import { Component, ChangeDetectionStrategy, Input, ElementRef, Renderer2, HostBinding } from '@angular/core';\nimport blockies from 'blockies';\n\n@Component({\n  selector: 'eth-blockies',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['./style.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BlockiesComponent {\n  private previous?: HTMLCanvasElement;\n\n  @HostBinding('title') title?: string;\n\n  @Input()\n  set address(address: string | undefined | null) {\n    if (!address) return;\n    this.title = address;\n    if (this.previous) this.renderer.removeChild(this.el.nativeElement, this.previous);\n    const { width, height } = this.el.nativeElement.getBoundingClientRect();\n    this.previous = blockies({ seed: address.toLowerCase() });\n    this.previous.style.width = `${width || 32}px`;\n    this.previous.style.height = `${height || 32}px`;\n    this.renderer.appendChild(this.el.nativeElement, this.previous);\n  }\n\n  constructor(private el: ElementRef<HTMLElement>, private renderer: Renderer2) {}\n}","import { NgZone } from \"@angular/core\";\nimport { Provider, EventFilter } from \"@ethersproject/abstract-provider\";\nimport { Observable } from \"rxjs\";\nimport { ERC1193Provider } from \"./erc1193\";\n\nexport function fromEthEvent<T>(\n  provider: Provider | ERC1193Provider,\n  zone: NgZone,\n  event: string | EventFilter,\n  initial?: Partial<T>\n) {\n  return new Observable<T>((subscriber) => {\n    if (arguments.length === 4) zone.run(() => subscriber.next(initial as any));\n    const handler = (...args: any[]) => {\n      zone.run(() => subscriber.next(1 < args.length ? args : args[0]));\n    };\n    provider.addListener(event as any, handler);\n    return () => provider.removeListener(event as any, handler);\n  });\n}","import type { Chain } from '@ngeth/ethers-core';\nimport { AddChainParameter } from './types';\n\nexport function fromChain(chain: Chain): AddChainParameter {\n  return ({\n    chainId: `0x${chain.chainId.toString(16)}`,\n    chainName: chain.name,\n    nativeCurrency: chain.nativeCurrency,\n    rpcUrls: chain.rpc,\n    blockExplorerUrls: chain.explorers.map(explorer => explorer.url),\n    iconUrls: []\n  })\n}","import { inject, NgZone } from '@angular/core';\nimport { getAddress } from '@ethersproject/address';\nimport { AddChainParameter, ERC1193Events, ERC1193Param, ERC1193Provider, WalletProfile, WatchAssetParams } from './types';\nimport { toChainId, toChainHex } from '@ngeth/ethers-core';\nimport { timer, Observable, of, combineLatest, defer, BehaviorSubject } from 'rxjs';\nimport { map, shareReplay, switchMap, filter } from 'rxjs/operators';\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers';\nimport { fromEthEvent } from '../events';\nimport { getChain } from '../chain';\nimport { fromChain } from './utils';\n\n\nconst errorCode = {\n  4001:\t'[User Rejected Request] The user rejected the request.',\n  4100:\t'[Unauthorized] \tThe requested method and/or account has not been authorized by the user.',\n  4200:\t'[Unsupported Method]\tThe Provider does not support the requested method.',\n  4900:\t'[Disconnected] The Provider is disconnected from all chains.',\n  4901:\t'[Chain Disconnected] The Provider is not connected to the requested chain.',\n}\n\n\n\nfunction exist<T>(value?: T | null): value is T {\n  return value !== undefined && value !== null;\n}\n\n\nexport abstract class ERC1193<Wallet extends WalletProfile = WalletProfile> {\n  private zone = inject(NgZone);\n  #ethersProvider?: Web3Provider;\n  #ethersSigner?: JsonRpcSigner;\n  #wallet = new BehaviorSubject<Wallet | null>(null);\n  #events: Record<string, Observable<unknown>> = {};\n\n  walletChanges = this.#wallet.asObservable();\n  \n  protected provider?: ERC1193Provider;\n  abstract account?: string;\n  abstract chainId?: number;\n  abstract wallets: Wallet[];\n  /** Method used to ask the user which wallet to select if multiple wallet available */\n  protected abstract getWallet(): Promise<Wallet | undefined>;\n\n  /** Observe if current account is connected */\n  connected$ = this.walletChanges.pipe(\n    filter(exist),\n    switchMap(wallet => {\n      return combineLatest([\n        this.fromEvent(wallet, 'connect', undefined),\n        this.fromEvent(wallet, 'disconnect', undefined),\n      ])\n    }),\n    switchMap(() => {\n      if (this.provider?.isConnected()) return of(true);\n      return timer(500).pipe(map(() => this.provider?.isConnected()))\n    }),\n    shareReplay({ refCount: true, bufferSize: 1 })\n  );\n    \n  /**\n   * First account connected to the dapp, if any\n   * @note This might not be the selected account in Metamask\n   */\n  account$ = this.walletChanges.pipe(\n    switchMap(wallet => wallet ? this.fromEvent(wallet, 'accountsChanged', []) : of(void 0)),\n    switchMap(() => {\n      if (this.account) return of([this.account]);\n      return timer(500).pipe(map(() => (this.account ? [this.account] : [])));\n    }),\n    map(accounts => accounts.length ? getAddress(accounts[0]) : undefined),\n    shareReplay({ refCount: true, bufferSize: 1 })\n  );\n\n  /** \n   * Current account. Doesn't emit until therer is a connected account\n   * @note ⚠️ Only use if you're sure there is an account (inside a guard for example)\n   */\n  currentAccount$ = this.account$.pipe(filter(exist));\n\n  chainId$ = this.walletChanges.pipe(\n    switchMap(wallet => wallet ? this.fromEvent(wallet, 'chainChanged', undefined) : of(void 0)),\n    switchMap(() => {\n      if (this.chainId) return of(this.chainId);\n      return timer(500).pipe(map(() => this.chainId))\n    }),\n    filter(exist),\n    map(chainId => toChainId(chainId)),\n    shareReplay({ refCount: true, bufferSize: 1 })\n  );\n\n  message$ = this.walletChanges.pipe(\n    filter(exist),\n    switchMap(wallet => this.fromEvent(wallet, 'message')),\n  );\n\n  get ethersProvider() {\n    return this.#ethersProvider;\n  }\n\n  get ethersSigner() {\n    return this.#ethersSigner;\n  }\n\n  /** Listen on event from MetaMask Provider */\n  protected fromEvent<K extends keyof ERC1193Events>(\n    wallet: Wallet,\n    event: K,\n    initial?: ERC1193Param<K>\n  ): Observable<ERC1193Param<K>> {\n    if (!this.#events[event]) {\n      this.#events[event] = defer(() => {\n        return fromEthEvent<ERC1193Param<K>>(wallet.provider, this.zone, event, initial);\n      });\n    }\n    return this.#events[event] as Observable<ERC1193Param<K>>;\n  }\n\n  /** Select a wallet to setup the provider & signer */\n  async selectWallet(wallet?: Wallet) {\n    if (!wallet) {\n      if (!this.wallets.length) throw new Error('No wallet provided or found');\n      wallet = await this.getWallet();\n      if (!wallet) throw new Error('No wallet selected');\n    }\n    if (wallet.provider !== this.provider) {\n      this.#ethersProvider = new Web3Provider(wallet.provider);\n      this.#ethersSigner = this.#ethersProvider.getSigner();\n      this.#wallet.next(wallet);\n      this.provider = wallet.provider;\n    }\n  }\n\n  /** Select a wallet and connect to it */\n  async enable(wallet?: Wallet): Promise<string[]> {\n    await this.selectWallet(wallet);\n    if (!this.provider) throw new Error('No provider connected to ERC1193 service');\n    return this.provider.request({ method: 'eth_requestAccounts' });\n  }\n\n  /**\n   * Request user to change chain\n   * @note If the error code (error.code) is 4902, then the requested chain has not been added by MetaMask, and you have to request to add it via addChain\n   * @param id The 0x-non zero chainId or decimal number\n   */\n  switchChain(id: string | number) {\n    const chainId = toChainHex(id);\n    return this.provider?.request<null>({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId }]\n    });\n  }\n\n  async addChain(chain: AddChainParameter | string) {\n    const params = (typeof chain === \"string\")\n      ? await getChain(chain).then(fromChain)\n      : chain;\n    return this.provider?.request<null>({\n      method: 'wallet_addEthereumChain',\n      params: [params]\n    });\n  }\n\n  watchAsset(params: WatchAssetParams['options']) {\n    return this.provider?.request<boolean>({\n      method: 'wallet_watchAsset',\n      params: { type: 'ERC20', options: params }\n    });\n  }\n}\n","import { Type } from '@angular/core';\nimport { Provider } from '@ethersproject/abstract-provider';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { ERC1193 } from './service';\nimport { WalletProfile } from './types';\n\n\nexport function ethersProviders<T extends WalletProfile>(erc1193: Type<ERC1193<T>>) {\n  return [{\n    provide: ERC1193,\n    useClass: erc1193\n  },{\n    provide: Provider,\n    useFactory: (erc1193: ERC1193) => erc1193.ethersProvider,\n    deps: [ERC1193]\n  }, {\n    provide: Signer,\n    useFactory: (erc1193: ERC1193) => erc1193.ethersSigner,\n    deps: [ERC1193]\n  }]\n  \n}\n","import { Injectable } from '@angular/core';\nimport { ERC1193 } from './service';\nimport { getAddress } from '@ethersproject/address';\nimport { toChainId } from '@ngeth/ethers-core';\nimport { ERC1193Provider, WalletProfile } from './types';\n\nfunction toInjectedWallet(provider: any): WalletProfile {\n  if (provider.isMetaMask) return { label: 'MetaMask', provider };\n  if (provider.isCoinbaseWallet) return { label: 'Coinbase', provider };\n  return { label: 'Unknown', provider };\n}\n\nfunction getInjectedProviders(): ERC1193Provider[] {\n  const ethereum = (window as any).ethereum;\n  if (!ethereum) return [];\n  if (Array.isArray(ethereum.providers) && ethereum.providers.length) {\n    return Array.from(new Set(ethereum.providers));\n  }\n  return [ethereum];\n}\n\n@Injectable({ providedIn: 'root' })\nexport class InjectedProviders extends ERC1193 {\n  wallets = getInjectedProviders().map(toInjectedWallet);\n\n  constructor() {\n    super();\n    if (this.wallets.length === 1) this.selectWallet(this.wallets[0]);\n  }\n\n  protected async getWallet() {\n    if (!this.wallets.length) return;\n    if (this.wallets.length === 1) return this.wallets[0];\n    const labels = this.wallets.map(w => w.label);\n    const res = prompt(`Which wallet do you want to use ? ${labels.join(', ')}`);\n    const wallet = this.wallets.find(w => w.label.toLowerCase() === res?.toLowerCase());\n    if (!wallet) alert(`\"${res}\" is not part of options: ${labels.join(', ')}`);\n    return wallet;\n  }\n\n  get account() {\n    if (!this.provider?.selectedAddress) return;\n    return getAddress(this.provider.selectedAddress);\n  }\n\n  get chainId() {\n    if (!this.provider?.chainId) return;\n    return toChainId(this.provider.chainId);\n  }\n}","import { Inject, Injectable, InjectionToken, Optional } from \"@angular/core\";\nimport type { ChainIcon, Chain, SupportedChains, ChainId } from \"@ngeth/ethers-core\";\nimport { explore, toChainId, defaultCustomChains, toChainHex } from \"@ngeth/ethers-core\";\nimport { Provider } from '@ethersproject/providers';\nimport { ERC1193 } from \"../erc1193\";\nimport { defer,  from } from \"rxjs\";\nimport { filter, switchMap } from 'rxjs/operators';\n\nexport const CUSTOM_CHAINS = new InjectionToken<Record<string, Chain>>('Custom Chains to use instead of https://github.com/ethereum-lists/chains', {\n  providedIn: 'root',\n  factory: () => defaultCustomChains\n});\n\nexport const SUPPORTED_CHAINS = new InjectionToken<SupportedChains>('List of supported chains', {\n  providedIn: 'root',\n  factory: () => '*'\n});\n\nfunction exist<T>(value?: T | null): value is T {\n  return value !== undefined && value !== null;\n}\n\nexport function getChain(chainId: string | number): Promise<Chain> {\n  const id = toChainId(chainId); // transform into decimals\n  const url = `https://raw.githubusercontent.com/ethereum-lists/chains/master/_data/chains/eip155-${id}.json`;\n  return fetch(url).then(res => res.json());\n}\n\nexport function getChainIcons(name: string, format?: ChainIcon['format']): Promise<ChainIcon> {\n  const url = `https://github.com/ethereum-lists/chains/blob/master/_data/icons/${name}.json`;\n  return fetch(url)\n    .then(res => res.json())\n    .then((icons: ChainIcon[]) => {\n      if (!format) return icons[0];\n      return icons.find(icon => icon.format === format) ?? icons[0];\n    });\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ChainManager {\n  private chains: Record<string, Chain> = {};\n  private icons: Record<string, ChainIcon> = {};\n\n  chain$ = defer(() => {\n    const source = this.erc1193 ? this.erc1193.chainId$ : from(this.currentChain());\n    return source;\n  }).pipe(\n    filter(exist),\n    switchMap(chainId => this.getChain(chainId)),\n  )\n\n  constructor(\n    private provider: Provider,\n    @Inject(CUSTOM_CHAINS) private customChains: Record<string, Chain>,\n    @Optional() private erc1193?: ERC1193,\n  ) {}\n\n  private async currentChain() {\n    if (this.erc1193) return this.erc1193.chainId;\n    return this.provider.getNetwork().then(network => network.chainId);\n  }\n\n  async getChain(chainId?: ChainId): Promise<Chain> {\n    chainId = chainId ?? await this.currentChain();\n    if (!chainId) throw new Error('No chainId provided');\n    const id = toChainHex(chainId);\n    if (id in this.customChains) return this.customChains[id];\n    if (!this.chains[id]) {\n      this.chains[id] = await getChain(id);\n    }\n    return this.chains[id];\n  }\n\n  async getIcon(name: string, format?: ChainIcon['format']) {\n    const key = format ? `${name}_${format}` : name;\n    if (!this.icons[key]) {\n      this.icons[key] = await getChainIcons(name, format);\n    }\n    return this.icons[key];\n  }\n\n  async explore(search: string, chainId?: ChainId) {\n    chainId = chainId ?? await this.currentChain();\n    if (!chainId) throw new Error('No chainId provided');\n    const chain = await this.getChain(chainId);\n    return explore(chain, search);\n  }\n}","import { Directive, ElementRef, forwardRef, HostListener, Input, Renderer2 } from \"@angular/core\";\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport type { BigNumberish } from \"ethers\";\nimport { formatUnits, parseUnits } from \"@ethersproject/units\";\nimport { Chain, ChainId } from \"@ngeth/ethers-core\";\nimport { ChainManager } from \"../../chain\";\n\n@Directive({\n  selector: 'input[type=\"ether\"]',\n  providers:[{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => EtherInputDirective),\n    multi: true\n  }],\n})\nexport class EtherInputDirective implements ControlValueAccessor {\n  chain?: Chain;\n  @Input() set chainId(id: ChainId | null) {\n    this.setChain(id);\n  }\n\n  @HostListener('change', ['$event']) change(event: Event) {\n    this.onChange((event.target as HTMLInputElement).value);\n  }\n  @HostListener('blur') blur() {\n    this.onTouch();\n  }\n\n  private onChange: (value: string) => unknown = () => null;\n  private onTouch = () => null;\n\n  constructor(\n    private chainManager: ChainManager,\n    private renderer: Renderer2,\n    private el: ElementRef<HTMLInputElement>,\n  ) { }\n\n  private setProperty(key: string, value: unknown): void {\n    this.renderer.setProperty(this.el.nativeElement, key, value);\n  }\n\n  private async setChain(id?: ChainId | null) {\n    this.chain = id\n      ? await this.chainManager.getChain(id)\n      : await this.chainManager.getChain();\n  }\n\n  get decimals() {\n    return this.chain?.nativeCurrency.decimals;\n  }\n  \n  async writeValue(value: BigNumberish) {\n    if (value) {\n      this.setProperty('value', formatUnits(value, this.chain?.nativeCurrency.decimals));\n    } else {\n      this.setProperty('value', '');\n    }\n  }\n\n  registerOnChange(fn: (value: BigNumberish) => null): void {\n    this.onChange = (value: string) => {\n      fn(parseUnits(value, this.decimals));\n    }\n  }\n\n  registerOnTouched(fn: () => null): void {\n    this.onTouch = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.setProperty('disabled', isDisabled);\n  }\n}","import { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\n\nexport const address: ValidatorFn = (control: AbstractControl): ValidationErrors|null => {\n  if (isAddress(control.value)) return null;\n  return { address: true };\n};\n\nexport function ownToken(tokenIds: string[]): ValidatorFn  {\n  return (control: AbstractControl): ValidationErrors|null => {\n    if (tokenIds.includes(control.value)) return null;\n    return { ownToken: { owned: tokenIds, actual: control.value } };\n  };\n}\n\nexport function ownTokenAmount(tokens: Record<string, BigNumber>): ValidatorFn  {\n  return (control: AbstractControl): ValidationErrors|null => {\n    const { tokenId, amount } = control.value;\n    const quantity: BigNumber = typeof amount === 'number' ? BigNumber.from(amount) : amount; \n    if (tokens[tokenId].gt(quantity)) return null;\n    return {\n      ownTokenAmount: {\n        owned: tokens[tokenId] ?? BigNumber.from(0),\n        actual: control.value\n      }\n    };\n  };\n}\n\nexport const EthValidators = {\n  address,\n  ownToken,\n  ownTokenAmount,\n}","import { Directive, ElementRef, forwardRef, HostListener, Injector, OnInit, Optional, Renderer2, Self } from \"@angular/core\";\nimport { AbstractControl, ControlValueAccessor, FormControl, NgControl, NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { EthValidators } from \"../../form\";\n\n@Directive({\n  selector: 'input[type=\"ethAddress\"]',\n  providers:[{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => AddressInputDirective),\n    multi: true\n  }],\n})\nexport class AddressInputDirective implements ControlValueAccessor, OnInit {\n  private control?: AbstractControl | null;\n\n  @HostListener('change', ['$event']) change(event: Event) {\n    this.onChange((event.target as HTMLInputElement).value);\n  }\n  @HostListener('blur') blur() {\n    this.onTouch();\n  }\n\n  private onChange: (value: string) => unknown = () => null;\n  private onTouch = () => null;\n\n  constructor(\n    private renderer: Renderer2,\n    private el: ElementRef<HTMLInputElement>,\n    private injector: Injector\n  ) {}\n  \n  \n  ngOnInit() {\n    this.control = this.injector.get(NgControl)?.control;\n    this.control?.addValidators(EthValidators.address)\n  }\n\n  private setProperty(key: string, value: unknown): void {\n    this.renderer.setProperty(this.el.nativeElement, key, value);\n  }\n\n  async writeValue(value: string) {\n    if (value) {\n      this.setProperty('value', getAddress(value));\n    } else {\n      this.setProperty('value', '');\n    }\n  }\n\n  registerOnChange(fn: (value: string) => null): void {\n    this.onChange = (value: string) => {\n      this.control?.markAsDirty();\n      fn(getAddress(value));\n    }\n  }\n\n  registerOnTouched(fn: () => null): void {\n    this.onTouch = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.setProperty('disabled', isDisabled);\n  }\n}","import { Component, ChangeDetectionStrategy, ViewChild, ElementRef } from '@angular/core';\nimport { ERC1193, WalletProfile } from '../../erc1193';\n\ninterface DialogElement extends HTMLElement {\n  showModal: () => void;  \n}\n\n@Component({\n  selector: 'eth-connect',\n  templateUrl: './connect.component.html',\n  styleUrls: ['./connect.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EthConnectComponent {\n\n  @ViewChild('selectDialog') selectDialog!: ElementRef<DialogElement>;\n\n  wallets = this.erc1193.wallets;\n  account$ = this.erc1193.account$;\n  connected$ = this.erc1193.connected$;\n\n  constructor(\n    private erc1193: ERC1193\n  ) { }\n\n  select(wallet: WalletProfile) {\n    this.erc1193.selectWallet(wallet);\n  }\n\n  enable() {\n    if (this.wallets.length === 1) return this.erc1193.enable();\n    return this.selectDialog.nativeElement.showModal();\n  }\n}\n","<ng-container *ngIf=\"wallets.length; else noProvider\">\n  <ng-container *ngIf=\"account$ | async as account; else connect\">\n    {{ account }}\n  </ng-container>\n</ng-container>\n\n<ng-template #noProvider>\n  <button>Create an account</button>\n</ng-template>\n<ng-template #connect>\n  <button (click)=\"enable()\">Select Wallet</button>\n</ng-template>\n\n<dialog #selectDialog>\n  <form method=\"dialog\">\n    <header>\n      <h2>Providers</h2>\n      <button>close</button>\n    </header>\n    <ul>\n      <li *ngFor=\"let wallet of wallets\">\n        <button (click)=\"select(wallet)\">{{ wallet.label }}</button>\n      </li>\n    </ul>\n  </form>\n</dialog>","import { BlockiesComponent } from './blockies';\nimport { EtherInputDirective } from './forms/ether';\nimport { AddressInputDirective } from './forms/address';\nimport { EthConnectComponent } from './connect/connect.component';\n\nexport * from './blockies';\nexport * from './forms/ether';\nexport * from './forms/address';\nexport * from './connect/connect.component';\n\nexport const ethersComponents = [EtherInputDirective, BlockiesComponent, AddressInputDirective, EthConnectComponent];\n","import { Inject, Optional, Pipe, PipeTransform } from '@angular/core';\nimport { BigNumber, BigNumberish } from 'ethers';\nimport { getAddress } from '@ethersproject/address';\nimport { formatUnits, formatEther } from '@ethersproject/units';\nimport { EtherSymbol } from '@ethersproject/constants';\nimport { isBytes } from '@ethersproject/bytes';\nimport { Chain, ChainCurrency, ChainId, explore, isSupportedChain, SupportedChains } from '@ngeth/ethers-core';\nimport { ChainManager, SUPPORTED_CHAINS } from './chain';\nimport { map } from 'rxjs/operators';\n\nfunction formatNativeCurrency(value: BigNumberish, currency: ChainCurrency) {\n  const amount = formatUnits(value, currency.decimals);\n  const symbol = currency.symbol ?? currency.name;\n  return `${amount} ${symbol}`;\n}\n\n@Pipe({ name: 'bignumber' })\nexport class BigNumberPipe implements PipeTransform {\n  transform(value: BigNumberish) {\n    if (value instanceof BigNumber) return value.toString();\n    if (typeof value === 'bigint') return value.toString(10);\n    if (typeof value === 'string') return value.startsWith('0x') ? parseInt(value) : value;\n    if (isBytes(value)) return new Uint8Array(value).toString(); // todo\n    return BigNumber.from(value).toString();\n  }\n}\n\n@Pipe({ name: 'ether' })\nexport class EtherPipe implements PipeTransform {\n  transform(value?: BigNumberish | null) {\n    if (value === null || value === undefined) return;\n    return `${formatEther(value)} ${EtherSymbol}`;\n  }\n}\n\n@Pipe({ name: 'ethCurrency' })\nexport class EthCurrencyPipe implements PipeTransform {\n  constructor(@Optional() private chain?: ChainManager) {}\n  async transform(value?: BigNumberish | null, chainId?: ChainId) {\n    if (value === null || value === undefined) return;\n    if (!this.chain) return `${formatEther(value)}${EtherSymbol}`;\n    if (chainId) {\n      const chain = await this.chain.getChain(chainId)\n      return formatNativeCurrency(value, chain.nativeCurrency);\n    }\n    return this.chain.chain$.pipe(\n      map(chain => formatNativeCurrency(value, chain.nativeCurrency))\n    );\n  }\n}\n\n@Pipe({ name: 'chain' })\nexport class ChainPipe implements PipeTransform {\n  constructor(private chain: ChainManager) {}\n  transform(chainId: ChainId) {\n    return this.chain.getChain(chainId);\n  }\n}\n\n@Pipe({ name: 'explore' })\nexport class ExplorePipe implements PipeTransform {\n  transform(search: string, chain: Chain) {\n    return explore(chain, search);\n  }\n}\n\n@Pipe({ name: 'supportedChain' })\nexport class SupportedChainPipe implements PipeTransform {\n  constructor(@Inject(SUPPORTED_CHAINS) private supportedChains: SupportedChains) {}\n  transform(chainId: string | number) {\n    return isSupportedChain(chainId, this.supportedChains);\n  }\n}\n\n@Pipe({ name: 'address' })\nexport class AddressPipe implements PipeTransform {\n  transform(address: string, format: 'short' | 'full' = 'full') {\n    const account = getAddress(address);\n    if (format === 'short') return `${account.slice(0, 6)}...${account.slice(-4)}`;\n    return account;\n  }\n}\n\nexport const ethersPipes = [\n  BigNumberPipe,\n  EtherPipe, \n  EthCurrencyPipe,\n  ExplorePipe,\n  AddressPipe,\n  SupportedChainPipe,\n  ChainPipe,\n];","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ethersComponents } from './components';\nimport { ethersPipes } from './pipes';\n\n\n@NgModule({\n  declarations: [...ethersPipes, ...ethersComponents],\n  exports: [...ethersPipes, ...ethersComponents],\n  imports: [CommonModule],\n})\nexport class EthersModule {}\n\n","import { ContractEvents, EthersContract, TypedEvent, TypedFilter } from '@ngeth/ethers-core';\nimport { EventFilter, ContractInterface } from '@ethersproject/contracts';\nimport { Log } from '@ethersproject/abstract-provider';\nimport { Observable, shareReplay, map, from, scan, startWith, combineLatest, finalize } from 'rxjs';\nimport { fromEthEvent } from './events';\nimport { inject, NgZone } from '@angular/core';\n\nimport type { Signer } from '@ethersproject/abstract-signer';\nimport type { Event } from '@ethersproject/contracts';\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { BytesLike } from '@ethersproject/bytes';\n\nfunction getEventTag(filter: EventFilter): string {\n  const emptyTopics = !filter.topics || !filter.topics.length;\n  if (filter.address && emptyTopics) return '*';\n\n  const address = filter.address ?? '*';\n  const topics = (filter.topics ?? []).map((topic) =>\n    Array.isArray(topic) ? topic.join('|') : topic\n  );\n  return `${address}:${topics}`;\n}\n\nfunction flattenEvents(events: Event[]) {\n  const record: Record<string, Event> = {};\n  for (const event of events) {\n    record[event.transactionHash] = event;\n  }\n  return Object.values(record);\n}\n\nexport class NgContract<\n  Events extends ContractEvents<EventKeys, FilterKeys>,\n  EventKeys extends Extract<keyof Events['events'], string> = Extract<keyof Events['events'], string>,\n  FilterKeys extends Extract<keyof Events['filters'], string> = Extract<keyof Events['filters'], string>,\n> extends EthersContract<Events, EventKeys, FilterKeys> {  \n\n  private ngZone: NgZone;\n  private _events: Record<string, Observable<any>> = {};\n\n  constructor(\n    address: string,\n    abi: ContractInterface,\n    signer?: Provider | Signer,\n    ngZone?: NgZone,\n  ) {\n    super(address, abi, signer);\n    this.ngZone = ngZone ?? inject(NgZone);\n  }\n\n  /** Transform event name into an EventFilter */\n  private getEventFilter(name: string): EventFilter {\n    if (name === 'error')\n      throw new Error('\"error\" event is not implemented yet');\n    if (name === 'event')\n      throw new Error('\"event\" event is not implemented yet');\n    if (name === '*') throw new Error('\"*\" event is not implemented yet');\n    const fragment = this.interface.getEvent(name);\n    const topic = this.interface.getEventTopic(fragment);\n    return { address: this.address, topics: [topic] };\n  }\n\n  private wrapEvent(log: Log): TypedEvent<Events, FilterKeys> {\n    const { name, signature, args, eventFragment } = this.interface.parseLog(log);\n    return {\n      ...log,\n      getBlock: () => this.provider.getBlock(log.blockHash),\n      getTransaction: () => this.provider.getTransaction(log.transactionHash),\n      getTransactionReceipt: () => this.provider.getTransactionReceipt(log.transactionHash),\n      decode: (data: BytesLike, topics?: Array<string>) => {\n        return this.interface.decodeEventLog(eventFragment, data, topics);\n      },\n      event: name,\n      eventSignature: signature,\n      args: args\n    } as TypedEvent<Events, FilterKeys>\n  }\n\n  /**\n   * Listen on the changes of an event, starting with the current state\n   * @param event The event filter\n   */\n  from<K extends FilterKeys>(event: TypedFilter<K> | K): Observable<TypedEvent<Events, K>[]> {\n    if (!this.provider) throw new Error('Provider required for event');\n    const eventFilter = typeof event === 'string'\n      ? this.getEventFilter(event)\n      : event;\n    const topic = eventFilter.topics?.[0];\n    if (typeof topic !== 'string') throw new Error('Invalid topic');\n\n    const tag = getEventTag(eventFilter);\n    if (!this._events[tag]) {\n      const initial = this.queryFilter(eventFilter);\n      const listener = fromEthEvent<Log>(\n        this.provider,\n        this.ngZone,\n        eventFilter\n      ).pipe(\n        map(log => this.wrapEvent(log)),\n        scan((acc, value) => acc.concat(value), [] as TypedEvent<Events, FilterKeys>[]),\n        startWith([] as TypedEvent<Events, FilterKeys>[])\n      );\n\n      this._events[tag] = combineLatest([\n        from(initial),\n        listener,\n      ]).pipe(\n        map(([events, last]) => [...events, ...last]),\n        map(flattenEvents), // remove duplicated (events seems to have a cache of 2 somehow...)\n        finalize(() => delete this._events[tag]), // remove cache when no subscriber remains\n        shareReplay({ refCount: true, bufferSize: 1 }),\n      );\n    }\n    return this._events[tag];\n  }\n}\n","import { inject, Injectable, Injector, NgZone } from '@angular/core';\nimport { Signer } from '@ethersproject/abstract-signer';\n\n@Injectable()\nexport abstract class ContractsManager<T> {\n  private contracts: Record<string, Record<string, T>> = {};\n  private injector = inject(Injector);\n  protected zone = inject(NgZone);\n  protected get signer() {\n    return this.injector.get(Signer);\n  }\n\n  protected abstract createInstance(address: string): T;\n\n  get(address: string, chainId: number): T {\n    if (!this.contracts[chainId]) this.contracts[chainId] = {};\n    if (!this.contracts[chainId][address]) {\n      this.contracts[chainId][address] = this.createInstance(address);\n    }\n    return this.contracts[chainId][address] as T;\n  }\n}","import { formatNumber } from \"@angular/common\";\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { ERC20Metadata } from \"./types\";\n\nexport function formatERC20(balance: BigNumber, metadata: ERC20Metadata, digitInfo?: string, locale?: string) {\n  const base = BigNumber.from(10).pow(metadata.decimals);\n  const amount = balance.div(base);\n  const value = formatNumber(amount.toNumber(), locale || 'en', digitInfo);\n  return `${value} ${metadata.symbol}`;\n}\n\nexport function parseERC20(amount: number | string, metadata: ERC20Metadata) {\n  const value = typeof amount === 'string' ? parseInt(amount) : amount;\n  const base = BigNumber.from(10).pow(metadata.decimals);\n  return BigNumber.from(value).mul(base);\n}","import { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\nimport { BigNumber } from 'ethers';\nimport { ERC20Metadata } from './types';\nimport { formatERC20 } from './utils';\n\n\n@Pipe({ name: 'erc20' })\nexport class ERC20Pipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n  transform(balance: BigNumber, metadata: ERC20Metadata, digitInfo?: string) {\n    return formatERC20(balance, metadata, digitInfo, this._locale)\n  }\n}","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { ERC20Pipe } from \"./pipes\";\n\n@NgModule({\n  declarations: [ERC20Pipe],\n  exports: [ERC20Pipe],\n  imports: [CommonModule]\n})\nexport class ERC20Module {}","import { FormGroup, Validators, FormControl } from \"@angular/forms\";\nimport { EthValidators } from \"../../form\";\nimport { ToFormControls } from \"../utils\";\n\ninterface ERC20Transfer {\n  to: string;\n  amount: number;\n}\n\nexport class ERC20FormTransfer extends FormGroup<ToFormControls<ERC20Transfer>> {\n  constructor(value: Partial<ERC20Transfer> = {}) {\n    super({\n      to: new FormControl(value.to, [Validators.required, EthValidators.address]),\n      amount: new FormControl(value.amount, [Validators.min(0)]),\n    })\n  }\n\n  setBalance(amount: number) {\n    this.get('amount')?.addValidators(Validators.max(amount));\n  }\n}\n","import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { EthValidators } from \"../../form\";\nimport { ToFormControls } from \"../utils\";\n\ninterface ERC721Transfer {\n  from?: string;\n  to: string;\n  tokenId: number;\n}\n\ninterface ERC721Mint {\n  to: string;\n  tokenId: number;\n  uri: string;\n}\n\n\n\nexport class ERC721FormTransfer extends FormGroup<ToFormControls<ERC721Transfer>> {\n  constructor(value: Partial<ERC721Transfer> = {}) {\n    super({\n      from: new FormControl(value.from, [EthValidators.address]),\n      to: new FormControl(value.to, [Validators.required, EthValidators.address]),\n      tokenId: new FormControl(value.tokenId, [Validators.required]),\n    })\n  }\n\n  setTokens(tokenIds: string[]) {\n    this.get('tokenId')?.addValidators(EthValidators.ownToken(tokenIds));\n  }\n}\n\n\nexport class ERC721FormMint extends FormGroup<ToFormControls<ERC721Mint>> {\n  constructor(value: Partial<ERC721Mint> = {}) {\n    super({\n      to: new FormControl(value.to, [Validators.required, EthValidators.address]),\n      tokenId: new FormControl(value.tokenId, [Validators.required]),\n      uri: new FormControl(value.uri, [Validators.required]),\n    })\n  }\n}","import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport type { BigNumber } from '@ethersproject/bignumber';\nimport { EthValidators } from \"../../form\";\nimport { ToFormControls } from \"../utils\";\n\ninterface ERC1155Transfer {\n  from?: string;\n  to: string;\n  tokenId: number;\n  amount: number;\n}\n\ninterface ERC1155Mint {\n  to: string;\n  tokenId: number;\n  amount: number;\n  data?: string;\n  uri?: string;\n}\n\n\n\nexport class ERC1155FormTransfer extends FormGroup<ToFormControls<ERC1155Transfer>> {\n  constructor(value: Partial<ERC1155Transfer> = {}) {\n    super({\n      from: new FormControl(value.from, [EthValidators.address]),\n      to: new FormControl(value.to, [Validators.required, EthValidators.address]),\n      tokenId: new FormControl(value.tokenId, [Validators.required]),\n      amount: new FormControl(value.amount, [Validators.required, Validators.min(0)])\n    })\n  }\n\n  setTokens(tokens: Record<string, BigNumber>) {\n    this.addValidators(EthValidators.ownTokenAmount(tokens));\n  }\n}\n\n\nexport class ERC1155FormMint extends FormGroup<ToFormControls<ERC1155Mint>> {\n  constructor(value: Partial<ERC1155Mint> = {}) {\n    super({\n      to: new FormControl(value.to, [Validators.required, EthValidators.address]),\n      tokenId: new FormControl(value.tokenId, [Validators.required]),\n      amount: new FormControl(value.amount, [Validators.required]),\n      uri: new FormControl(value.uri),\n      data: new FormControl(value.data)\n    })\n  }\n}","import { Inject, Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from \"@angular/router\";\nimport { toChainId } from '@ngeth/ethers-core';\nimport { map, tap } from \"rxjs\";\nimport { SUPPORTED_CHAINS } from \"./chain\";\nimport { ERC1193 } from \"./erc1193\";\n\n@Injectable({ providedIn: 'root' })\nexport class HasInjectedProviderGuard implements CanActivate {\n  public previous?: string;\n\n  constructor(private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if ('ethereum' in window) return true;\n    this.previous = state.url;\n    const redirect = route.data['hasInjectedProviderRedirect'] ?? '/no-injected-provider';\n    // Navigate to avoid next guard to run\n    return this.router.navigate([redirect]);\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class HasWalletGuard implements CanActivate {\n  public previous?: string;\n\n  constructor(private erc1193: ERC1193, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (this.erc1193.wallets.length) return true;\n    this.previous = state.url;\n    const redirect = route.data['hasWalletRedirect'] ?? '/no-wallet';\n    // Navigate to avoid next guard to run\n    return this.router.navigate([redirect]);\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class IsSupportedChainGuard {\n  public previous?: string;\n  constructor(\n    private router: Router,\n    private erc1193: ERC1193,\n    @Inject(SUPPORTED_CHAINS) private supportedChains: '*' | number[],\n  ) {}\n  \n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    this.previous = state.url;\n    if (this.supportedChains === '*') return true;\n    if (!this.erc1193.chainId) return false;\n    const chainIndex = toChainId(this.erc1193.chainId);\n    if (this.supportedChains.includes(chainIndex)) return true;\n    const redirect = route.data['isSupportedChainRedirect'] ?? '/unsupported-chain';\n    return this.router.navigate([redirect]);\n  }\n}\n\n\n@Injectable({ providedIn: 'root' })\nexport class IsConnectedGuard implements CanActivate {\n  public previous?: string;\n\n  constructor(\n    private router: Router,\n    private erc1193: ERC1193\n  ) {}\n  \n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    this.previous = state.url;\n    const redirect = route.data['isConnectedRedirect'] ?? '/not-connected';\n    return this.erc1193.connected$.pipe(\n      map(isConnected => isConnected || this.router.parseUrl(redirect))\n    );\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class HasSignerGuard implements CanActivate {\n  public previous?: string;\n\n  constructor(\n    private router: Router,\n    private erc1193: ERC1193\n  ) {}\n  \n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    this.previous = state.url;\n    const redirect = route.data['hasSignerRedirect'] ?? '/no-signer';\n    return this.erc1193.account$.pipe(\n      tap(console.log),\n      map(account => !!account || this.router.parseUrl(redirect))\n    );\n  }\n}\n\n\n","import { getDefaultProvider, Provider } from '@ethersproject/providers';\nimport { Networkish } from '@ethersproject/networks';\n\nexport function rpcProvider(network?: Networkish, options?: any) {\n  return { provide: Provider, useFactory: () => getDefaultProvider(network, options) };\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["exist","i2.ERC1193","i1.ChainManager","i1.ERC1193","BigNumber","i1.BigNumberPipe","i1.EtherPipe","i1.EthCurrencyPipe","i1.ExplorePipe","i1.AddressPipe","i1.SupportedChainPipe","i1.ChainPipe","i2.EtherInputDirective","i3.BlockiesComponent","i4.AddressInputDirective","i5.EthConnectComponent","map","shareReplay","i1","Provider"],"mappings":"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"}