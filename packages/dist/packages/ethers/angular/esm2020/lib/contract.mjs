import { EthersContract } from '@ngeth/ethers-core';
import { shareReplay, map, from, scan, startWith, combineLatest, finalize } from 'rxjs';
import { fromEthEvent } from './events';
import { inject, NgZone } from '@angular/core';
function getEventTag(filter) {
    const emptyTopics = !filter.topics || !filter.topics.length;
    if (filter.address && emptyTopics)
        return '*';
    const address = filter.address ?? '*';
    const topics = (filter.topics ?? []).map((topic) => Array.isArray(topic) ? topic.join('|') : topic);
    return `${address}:${topics}`;
}
function flattenEvents(events) {
    const record = {};
    for (const event of events) {
        record[event.transactionHash] = event;
    }
    return Object.values(record);
}
export class NgContract extends EthersContract {
    constructor(address, abi, signer, ngZone) {
        super(address, abi, signer);
        this._events = {};
        this.ngZone = ngZone ?? inject(NgZone);
    }
    /** Transform event name into an EventFilter */
    getEventFilter(name) {
        if (name === 'error')
            throw new Error('"error" event is not implemented yet');
        if (name === 'event')
            throw new Error('"event" event is not implemented yet');
        if (name === '*')
            throw new Error('"*" event is not implemented yet');
        const fragment = this.interface.getEvent(name);
        const topic = this.interface.getEventTopic(fragment);
        return { address: this.address, topics: [topic] };
    }
    wrapEvent(log) {
        const { name, signature, args, eventFragment } = this.interface.parseLog(log);
        return {
            ...log,
            getBlock: () => this.provider.getBlock(log.blockHash),
            getTransaction: () => this.provider.getTransaction(log.transactionHash),
            getTransactionReceipt: () => this.provider.getTransactionReceipt(log.transactionHash),
            decode: (data, topics) => {
                return this.interface.decodeEventLog(eventFragment, data, topics);
            },
            event: name,
            eventSignature: signature,
            args: args
        };
    }
    /**
     * Listen on the changes of an event, starting with the current state
     * @param event The event filter
     */
    from(event) {
        if (!this.provider)
            throw new Error('Provider required for event');
        const eventFilter = typeof event === 'string'
            ? this.getEventFilter(event)
            : event;
        const topic = eventFilter.topics?.[0];
        if (typeof topic !== 'string')
            throw new Error('Invalid topic');
        const tag = getEventTag(eventFilter);
        if (!this._events[tag]) {
            const initial = this.queryFilter(eventFilter);
            const listener = fromEthEvent(this.provider, this.ngZone, eventFilter).pipe(map(log => this.wrapEvent(log)), scan((acc, value) => acc.concat(value), []), startWith([]));
            this._events[tag] = combineLatest([
                from(initial),
                listener,
            ]).pipe(map(([events, last]) => [...events, ...last]), map(flattenEvents), // remove duplicated (events seems to have a cache of 2 somehow...)
            finalize(() => delete this._events[tag]), // remove cache when no subscriber remains
            shareReplay({ refCount: true, bufferSize: 1 }));
        }
        return this._events[tag];
    }
}
//# sourceMappingURL=data:application/json;base64,