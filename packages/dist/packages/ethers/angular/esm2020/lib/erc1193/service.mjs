var _ERC1193_ethersProvider, _ERC1193_ethersSigner, _ERC1193_wallet, _ERC1193_events;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { inject, NgZone } from '@angular/core';
import { getAddress } from '@ethersproject/address';
import { toChainId, toChainHex } from '@ngeth/ethers-core';
import { timer, of, combineLatest, defer, BehaviorSubject } from 'rxjs';
import { map, shareReplay, switchMap, filter } from 'rxjs/operators';
import { Web3Provider } from '@ethersproject/providers';
import { fromEthEvent } from '../events';
import { getChain } from '../chain';
import { fromChain } from './utils';
const errorCode = {
    4001: '[User Rejected Request] The user rejected the request.',
    4100: '[Unauthorized] 	The requested method and/or account has not been authorized by the user.',
    4200: '[Unsupported Method]	The Provider does not support the requested method.',
    4900: '[Disconnected] The Provider is disconnected from all chains.',
    4901: '[Chain Disconnected] The Provider is not connected to the requested chain.',
};
function exist(value) {
    return value !== undefined && value !== null;
}
export class ERC1193 {
    constructor() {
        this.zone = inject(NgZone);
        _ERC1193_ethersProvider.set(this, void 0);
        _ERC1193_ethersSigner.set(this, void 0);
        _ERC1193_wallet.set(this, new BehaviorSubject(null));
        _ERC1193_events.set(this, {});
        this.walletChanges = __classPrivateFieldGet(this, _ERC1193_wallet, "f").asObservable();
        /** Observe if current account is connected */
        this.connected$ = this.walletChanges.pipe(filter(exist), switchMap(wallet => {
            return combineLatest([
                this.fromEvent(wallet, 'connect', undefined),
                this.fromEvent(wallet, 'disconnect', undefined),
            ]);
        }), switchMap(() => {
            if (this.provider?.isConnected())
                return of(true);
            return timer(500).pipe(map(() => this.provider?.isConnected()));
        }), shareReplay({ refCount: true, bufferSize: 1 }));
        /**
         * First account connected to the dapp, if any
         * @note This might not be the selected account in Metamask
         */
        this.account$ = this.walletChanges.pipe(switchMap(wallet => wallet ? this.fromEvent(wallet, 'accountsChanged', []) : of(void 0)), switchMap(() => {
            if (this.account)
                return of([this.account]);
            return timer(500).pipe(map(() => (this.account ? [this.account] : [])));
        }), map(accounts => accounts.length ? getAddress(accounts[0]) : undefined), shareReplay({ refCount: true, bufferSize: 1 }));
        /**
         * Current account. Doesn't emit until therer is a connected account
         * @note ⚠️ Only use if you're sure there is an account (inside a guard for example)
         */
        this.currentAccount$ = this.account$.pipe(filter(exist));
        this.chainId$ = this.walletChanges.pipe(switchMap(wallet => wallet ? this.fromEvent(wallet, 'chainChanged', undefined) : of(void 0)), switchMap(() => {
            if (this.chainId)
                return of(this.chainId);
            return timer(500).pipe(map(() => this.chainId));
        }), filter(exist), map(chainId => toChainId(chainId)), shareReplay({ refCount: true, bufferSize: 1 }));
        this.message$ = this.walletChanges.pipe(filter(exist), switchMap(wallet => this.fromEvent(wallet, 'message')));
    }
    get ethersProvider() {
        return __classPrivateFieldGet(this, _ERC1193_ethersProvider, "f");
    }
    get ethersSigner() {
        return __classPrivateFieldGet(this, _ERC1193_ethersSigner, "f");
    }
    /** Listen on event from MetaMask Provider */
    fromEvent(wallet, event, initial) {
        if (!__classPrivateFieldGet(this, _ERC1193_events, "f")[event]) {
            __classPrivateFieldGet(this, _ERC1193_events, "f")[event] = defer(() => {
                return fromEthEvent(wallet.provider, this.zone, event, initial);
            });
        }
        return __classPrivateFieldGet(this, _ERC1193_events, "f")[event];
    }
    /** Select a wallet to setup the provider & signer */
    async selectWallet(wallet) {
        if (!wallet) {
            if (!this.wallets.length)
                throw new Error('No wallet provided or found');
            wallet = await this.getWallet();
            if (!wallet)
                throw new Error('No wallet selected');
        }
        if (wallet.provider !== this.provider) {
            __classPrivateFieldSet(this, _ERC1193_ethersProvider, new Web3Provider(wallet.provider), "f");
            __classPrivateFieldSet(this, _ERC1193_ethersSigner, __classPrivateFieldGet(this, _ERC1193_ethersProvider, "f").getSigner(), "f");
            __classPrivateFieldGet(this, _ERC1193_wallet, "f").next(wallet);
            this.provider = wallet.provider;
        }
    }
    /** Select a wallet and connect to it */
    async enable(wallet) {
        await this.selectWallet(wallet);
        if (!this.provider)
            throw new Error('No provider connected to ERC1193 service');
        return this.provider.request({ method: 'eth_requestAccounts' });
    }
    /**
     * Request user to change chain
     * @note If the error code (error.code) is 4902, then the requested chain has not been added by MetaMask, and you have to request to add it via addChain
     * @param id The 0x-non zero chainId or decimal number
     */
    switchChain(id) {
        const chainId = toChainHex(id);
        return this.provider?.request({
            method: 'wallet_switchEthereumChain',
            params: [{ chainId }]
        });
    }
    async addChain(chain) {
        const params = (typeof chain === "string")
            ? await getChain(chain).then(fromChain)
            : chain;
        return this.provider?.request({
            method: 'wallet_addEthereumChain',
            params: [params]
        });
    }
    watchAsset(params) {
        return this.provider?.request({
            method: 'wallet_watchAsset',
            params: { type: 'ERC20', options: params }
        });
    }
}
_ERC1193_ethersProvider = new WeakMap(), _ERC1193_ethersSigner = new WeakMap(), _ERC1193_wallet = new WeakMap(), _ERC1193_events = new WeakMap();
//# sourceMappingURL=data:application/json;base64,